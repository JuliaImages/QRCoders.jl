# test for format and version
"""
Format information per mode and mask number.
"""
formatinfo = Dict{Tuple{ErrCorrLevel, Int}, BitArray{1}}(
    [ (Low(), 0) => [1,1,1,0,1,1,1,1,1,0,0,0,1,0,0]
    , (Low(), 1) => [1,1,1,0,0,1,0,1,1,1,1,0,0,1,1]
    , (Low(), 2) => [1,1,1,1,1,0,1,1,0,1,0,1,0,1,0]
    , (Low(), 3) => [1,1,1,1,0,0,0,1,0,0,1,1,1,0,1]
    , (Low(), 4) => [1,1,0,0,1,1,0,0,0,1,0,1,1,1,1]
    , (Low(), 5) => [1,1,0,0,0,1,1,0,0,0,1,1,0,0,0]
    , (Low(), 6) => [1,1,0,1,1,0,0,0,1,0,0,0,0,0,1]
    , (Low(), 7) => [1,1,0,1,0,0,1,0,1,1,1,0,1,1,0]
    , (Medium(), 0) => [1,0,1,0,1,0,0,0,0,0,1,0,0,1,0]
    , (Medium(), 1) => [1,0,1,0,0,0,1,0,0,1,0,0,1,0,1]
    , (Medium(), 2) => [1,0,1,1,1,1,0,0,1,1,1,1,1,0,0]
    , (Medium(), 3) => [1,0,1,1,0,1,1,0,1,0,0,1,0,1,1]
    , (Medium(), 4) => [1,0,0,0,1,0,1,1,1,1,1,1,0,0,1]
    , (Medium(), 5) => [1,0,0,0,0,0,0,1,1,0,0,1,1,1,0]
    , (Medium(), 6) => [1,0,0,1,1,1,1,1,0,0,1,0,1,1,1]
    , (Medium(), 7) => [1,0,0,1,0,1,0,1,0,1,0,0,0,0,0]
    , (Quartile(), 0) => [0,1,1,0,1,0,1,0,1,0,1,1,1,1,1]
    , (Quartile(), 1) => [0,1,1,0,0,0,0,0,1,1,0,1,0,0,0]
    , (Quartile(), 2) => [0,1,1,1,1,1,1,0,0,1,1,0,0,0,1]
    , (Quartile(), 3) => [0,1,1,1,0,1,0,0,0,0,0,0,1,1,0]
    , (Quartile(), 4) => [0,1,0,0,1,0,0,1,0,1,1,0,1,0,0]
    , (Quartile(), 5) => [0,1,0,0,0,0,1,1,0,0,0,0,0,1,1]
    , (Quartile(), 6) => [0,1,0,1,1,1,0,1,1,0,1,1,0,1,0]
    , (Quartile(), 7) => [0,1,0,1,0,1,1,1,1,1,0,1,1,0,1]
    , (High(), 0) => [0,0,1,0,1,1,0,1,0,0,0,1,0,0,1]
    , (High(), 1) => [0,0,1,0,0,1,1,1,0,1,1,1,1,1,0]
    , (High(), 2) => [0,0,1,1,1,0,0,1,1,1,0,0,1,1,1]
    , (High(), 3) => [0,0,1,1,0,0,1,1,1,0,1,0,0,0,0]
    , (High(), 4) => [0,0,0,0,1,1,1,0,1,1,0,0,0,1,0]
    , (High(), 5) => [0,0,0,0,0,1,0,0,1,0,1,0,1,0,1]
    , (High(), 6) => [0,0,0,1,1,0,1,0,0,0,0,1,1,0,0]
    , (High(), 7) => [0,0,0,1,0,0,0,0,0,1,1,1,0,1,1]
    ]
  )

"""
Version information.
"""
versioninfo = Array{Array{Bool, 1}, 1}(
    [ []
    , []
    , []
    , []
    , []
    , []
    , [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0]
    , [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0]
    , [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0]
    , [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0]
    , [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0]
    , [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0]
    , [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0]
    , [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0]
    , [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0]
    , [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0]
    , [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0]
    , [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0]
    , [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0]
    , [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0]
    , [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0]
    , [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0]
    , [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0]
    , [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0]
    , [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0]
    , [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0]
    , [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0]
    , [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0]
    , [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0]
    , [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0]
    , [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0]
    , [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]
    , [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1]
    , [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1]
    , [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1]
    , [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1]
    , [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]
    , [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1]
    , [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1]
    , [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1]
    ]
)
  
@testset "test for versioninfo and formatinfo" begin
    for (v, bits) in enumerate(versioninfo)
        v < 7 && continue
        ver_code = qrversion(v)
        verbits = reverse!(int2bitarray(ver_code; pad = 18))
        @test verbits == bits && ver_code == qrversion(UInt8(v))
    end
    for ((ec, mask), bits) in formatinfo
        fmt = mode2bin[ec] << 3 âŠ» mask
        fmt_code = qrformat(fmt)
        fmtbits = int2bitarray(fmt_code; pad = 15)
        @test fmtbits == bits && fmt_code == qrformat(UInt8(fmt))
    end
end