var documenterSearchIndex = {"docs":
[{"location":"#QRCoders.jl-Documentation","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Module that can create QR codes as data or images using qrcode or exportqrcode.","category":"page"},{"location":"#Creating-QR-codes","page":"QRCoders.jl Documentation","title":"Creating QR codes","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"qrcode\nexportqrcode\nQRCode","category":"page"},{"location":"#QRCoders.qrcode","page":"QRCoders.jl Documentation","title":"QRCoders.qrcode","text":"qrcode( message::AbstractString\n      ; eclevel::ErrCorrLevel = Medium()\n      , version::Int = 0\n      , mode::Mode = Numeric()\n      , mask::Int = -1\n      , width::Int=0)\n\nCreate a BitArray{2} with the encoded message, with true (1) for the black areas and false (0) as the white ones.\n\nThe error correction level eclevel can be picked from four values: Low() (7% of missing data can be restored), Medium() (15%), Quartile() (25%) or High() (30%). Higher levels make denser QR codes.\n\nThe version of the QR code can be picked from 1 to 40. If the assigned version is  too small to contain the message, the first available version is used.\n\nThe encoding mode mode can be picked from five values: Numeric(), Alphanumeric(), Byte(), Kanji() or UTF8(). If the assigned mode is nothing or failed to contain the message, the mode is automatically picked.\n\nThe mask pattern mask can be picked from 0 to 7. If the assigned mask is nothing, the mask pattern will picked by the penalty rules.\n\n\n\n\n\nqrcode(code::QRCode)\n\nCreate a QR code matrix by the QRCode object.\n\nNote: It would raise an error if failed to use the specified modeorversion`.\n\n\n\n\n\n","category":"function"},{"location":"#QRCoders.exportqrcode","page":"QRCoders.jl Documentation","title":"QRCoders.exportqrcode","text":"exportqrcode( message::AbstractString\n            , path::AbstractString = \"qrcode.png\"\n            ; eclevel::ErrCorrLevel = Medium()\n            , version::Int = 0\n            , mode::Mode = nothing\n            , width::int = 4\n            , pixels::Int = 160)\n\nCreate an image with the encoded message of approximate size pixels x pixels.\n\nThe error correction level eclevel can be picked from four values: Low() (7% of missing data can be restored), Medium() (15%), Quartile() (25%) or High() (30%). Higher levels make denser QR codes.\n\nThe version of the QR code can be picked from 1 to 40. If the assigned version is  too small to contain the message, the first available version is used.\n\nThe encoding mode mode can be picked from four values: Numeric(), Alphanumeric(), Byte(), Kanji() or UTF8(). If the assigned mode is nothing or failed to contain the message, the mode is automatically picked.\n\nThe mask pattern mask can be picked from 0 to 7. If the assigned mask is nothing, the mask pattern will picked by the penalty rules.\n\n\n\n\n\nexportqrcode( code::QRCode\n            , path::AbstractString = \"qrcode.png\"\n            ; pixels::Int = 160)\n\nCreate an image with the encoded message of approximate size targetsize.\n\n\n\n\n\nexportqrcode( codes::AbstractVector{QRCode}\n            , path::AbstractString = \"qrcode.gif\"\n            ; pixels::Int = 160\n            , fps::Int = 2)\n\nCreate an animated gif with codes of approximate size targetsize.\n\nThe frame rate fps is the number of frames per second.\n\nNote: The codes should have the same size while the other properties can be different.\n\n\n\n\n\nexportqrcode( msgs::AbstractVector{<:AbstractString}\n            , path::AbstractString = \"qrcode.gif\"\n            ; eclevel::ErrCorrLevel = Medium()\n            , version::Int = 0\n            , mode::Mode = Numeric()\n            , mask::Int = -1\n            , width::Int = 4\n            , targetsize::Int = 5\n            , pixels::Int = 160\n            , fps::Int = 2)\n\nCreate an animated gif with msgs of approximate size pixels x pixels.\n\nThe frame rate fps is the number of frames per second.\n\n\n\n\n\n","category":"function"},{"location":"#QRCoders.QRCode","page":"QRCoders.jl Documentation","title":"QRCoders.QRCode","text":"QRCode\n\nA type that represents a QR code.\n\nFields\n\nversion::Int: version of the QR code\nmode::Mode: encoding mode of the QR code\neclevel::ErrCorrLevel: error correction level of the QR code\nmask::Int: mask pattern of the QR code\nmessage::String: message to be encoded\nborder::Int: width of the white border\n\n\n\n\n\n","category":"type"},{"location":"#Encoding-modes","page":"QRCoders.jl Documentation","title":"Encoding modes","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Currently, there are five supported encoding modes.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Mode\nNumeric\nAlphanumeric\nByte\nKanji\nUTF8","category":"page"},{"location":"#QRCoders.Mode","page":"QRCoders.jl Documentation","title":"QRCoders.Mode","text":"Abstract type that groups the five supported encoding modes Numeric, Alphanumeric, Byte, Kanji and UTF8.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Numeric","page":"QRCoders.jl Documentation","title":"QRCoders.Numeric","text":"Encoding mode for messages composed of digits only.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Alphanumeric","page":"QRCoders.jl Documentation","title":"QRCoders.Alphanumeric","text":"Encoding mode for messages composed of digits, characters A-Z (capital only) , space and % * + - . / : $.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Byte","page":"QRCoders.jl Documentation","title":"QRCoders.Byte","text":"Encoding mode for messages composed of one-byte characters(unicode range from 0x00 to 0xff, including ISO-8859-1 and undefined characters)\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Kanji","page":"QRCoders.jl Documentation","title":"QRCoders.Kanji","text":"Encoding mode for messages composed of Shift JIS(Shift Japanese Industrial Standards) characters.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.UTF8","page":"QRCoders.jl Documentation","title":"QRCoders.UTF8","text":"Encoding mode for messages composed of utf-8 characters.\n\n\n\n\n\n","category":"type"},{"location":"#Error-Correction","page":"QRCoders.jl Documentation","title":"Error Correction","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"There are four error correction levels you can choose from.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"ErrCorrLevel\nLow\nMedium\nQuartile\nHigh","category":"page"},{"location":"#QRCoders.ErrCorrLevel","page":"QRCoders.jl Documentation","title":"QRCoders.ErrCorrLevel","text":"Abstract type that groups the four error correction levels Low, Medium, Quartile and High.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Low","page":"QRCoders.jl Documentation","title":"QRCoders.Low","text":"Error correction level that can restore up to 7% of missing codewords.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Medium","page":"QRCoders.jl Documentation","title":"QRCoders.Medium","text":"Error correction level that can restore up to 15% of missing codewords.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Quartile","page":"QRCoders.jl Documentation","title":"QRCoders.Quartile","text":"Error correction level that can restore up to 25% of missing codewords.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.High","page":"QRCoders.jl Documentation","title":"QRCoders.High","text":"Error correction level that can restore up to 30% of missing codewords.\n\n\n\n\n\n","category":"type"},{"location":"#Reed-Solomon-code","page":"QRCoders.jl Documentation","title":"Reed Solomon code","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Poly\ngenerator_matrix\ngeterrcode","category":"page"},{"location":"#QRCoders.Polynomial.Poly","page":"QRCoders.jl Documentation","title":"QRCoders.Polynomial.Poly","text":"Data structure to encode polynomials to generate the error correction codewords.\n\n\n\n\n\n","category":"type"},{"location":"#QRCoders.Polynomial.generator_matrix","page":"QRCoders.jl Documentation","title":"QRCoders.Polynomial.generator_matrix","text":"generator_matrix(msglen::Int, necwords::Int)\n\nCreate the generator matrix of size (msglen + necwords, msglen).\n\nThe generator matrix G is of the form\n\n[ * ]\n[ I ]\n\nwhere I is the identity matrix of size msglen and * is computed by the remainder polynomials.\n\nNote that we use a reversed version of generator matrices, i.e. the coefficients is stored in the reverse order,  e.g. a0, ..., an.\n\nIn this sense, we still have Gâ‹…x = c, where x is the message polynomial  and c is the received polynomial.\n\nTo get an ordinary generator matrix, just rotate it by 180 degrees, i.e. @view(G[end:-1:1, end:-1:1])\n\n\n\n\n\n","category":"function"},{"location":"#QRCoders.Polynomial.geterrcode","page":"QRCoders.jl Documentation","title":"QRCoders.Polynomial.geterrcode","text":"geterrcode(f::Poly, n::Int)\n\nReturn a polynomial containing the n error correction codewords of f.\n\n\n\n\n\n","category":"function"},{"location":"#styled-QR-codes","page":"QRCoders.jl Documentation","title":"styled QR codes","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Plot in REPL.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"unicodeplot\nunicodeplotbychar","category":"page"},{"location":"#QRCoders.unicodeplot","page":"QRCoders.jl Documentation","title":"QRCoders.unicodeplot","text":"unicodeplot(mat::AbstractMatrix{Bool}; border=:none)\n\nUses UnicodePlots.jl to draw the matrix.\n\nNote: In UnicodePlots.jl, matrix index start from the left-down corner.\n\n\n\n\n\nunicodeplot(message::AbstractString\n          ; border=:none)\n\nUses UnicodePlots.jl to draw the QR code of message.\n\n\n\n\n\n","category":"function"},{"location":"#QRCoders.unicodeplotbychar","page":"QRCoders.jl Documentation","title":"QRCoders.unicodeplotbychar","text":"unicodeplotbychar(mat::AbstractMatrix)\n\nPlot of the QR code using Unicode characters.\n\nThe value 1(true) represents a dark space and 0(false)  a white square. It is the same convention as QR code and  is the opposite of general image settings.\n\n\n\n\n\nunicodeplotbychar(message::AbstractString)\n\nPlot of the QR code using Unicode characters.\n\n\n\n\n\n","category":"function"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Plot image in a QR code.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"imageinqrcode","category":"page"},{"location":"#QRCoders.imageinqrcode","page":"QRCoders.jl Documentation","title":"QRCoders.imageinqrcode","text":"imageinqrcode( code::QRCode\n             , img::AbstractMatrix{Bool}\n             ; rate::Real=1\n             , singlemask::Bool=true\n             , leftop::Tuple{Int, Int}=(-1, -1)\n             , fillalignment::Bool=false\n             ) where T <: Union{Bool, Nothing}\n\nPlot image inside QR code.\n\nArguments\n\ncode::QRCode: QR code\nimg::AbstractMatrix{Bool}: image to be plotted\nrate::Real=1: damage rate of the error correction codewords\nsinglemask::Bool=true: use the default mask pattern\nleftop::Tuple{Int,Int}=(-1, -1): left top corner of the image\n\n\n\n\n\n","category":"function"},{"location":"#Examples","page":"QRCoders.jl Documentation","title":"Examples","text":"","category":"section"},{"location":"#Create-a-QR-code-matrix","page":"QRCoders.jl Documentation","title":"Create a QR code matrix","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"julia> using QRCoders\n\njulia> qrcode(\"Hello world!\")\n21Ã—21 BitMatrix:\n 1  1  1  1  1  1  1  0  1  1  1  1  1  0  1  1  1  1  1  1  1\n 1  0  0  0  0  0  1  0  1  0  1  0  1  0  1  0  0  0  0  0  1\n 1  0  1  1  1  0  1  0  0  0  1  1  0  0  1  0  1  1  1  0  1\n â‹®              â‹®              â‹®              â‹®              â‹®\n 1  0  1  1  1  0  1  0  1  0  0  0  1  0  0  1  0  0  1  0  0\n 1  0  0  0  0  0  1  0  0  1  0  1  0  1  1  1  1  0  0  0  1\n 1  1  1  1  1  1  1  0  1  0  1  1  0  1  1  1  0  0  1  0  0","category":"page"},{"location":"#Export-to-a-file","page":"QRCoders.jl Documentation","title":"Export to a file","text":"","category":"section"},{"location":"#PNG-file-â€“-default","page":"QRCoders.jl Documentation","title":"PNG file â€“ default","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"julia> exportqrcode(\"Hello world!\")","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"A file will be saved at ./qrcode.png.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"(Image: QRCode1)","category":"page"},{"location":"#GIF-file","page":"QRCoders.jl Documentation","title":"GIF file","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Create a .gif file from messages.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Use .gif file to show QR codes with different masks.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"julia> using QRCoders: penalty\njulia> codes = [QRCode(\"Hello world!\", mask = i) for i in 0:7]\njulia> qrcode.(codes) .|> penalty |> print\n[425, 485, 342, 318, 495, 562, 368, 415]\njulia> exportqrcode(codes, fps=3)","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"(Image: QRCode-masks)","category":"page"},{"location":"#Styled-QR-codes","page":"QRCoders.jl Documentation","title":"Styled QR codes","text":"","category":"section"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"This part is still under development, see issue#33 for more information. Feel free to contribute or propose more ideas!","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Plot an image inside a QRCode.","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"using TestImages, ColorTypes, ImageTransformations\nusing QRCoders\noriimg = testimage(\"cameraman\")\ncode = QRCode(\"Hello world!\", version=16, width=4)\nimg = imresize(oriimg, 66, 66) .|> Gray .|> round .|> Bool .|> !\nimageinqrcode(code, img; rate=0.9) |> exportbitmat(\"qrcode-camera.png\")","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"(Image: cameraman)","category":"page"},{"location":"","page":"QRCoders.jl Documentation","title":"QRCoders.jl Documentation","text":"Here rate is the damage rate of error correction codewords, it should be no greater than 1.","category":"page"}]
}
